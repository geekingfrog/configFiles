#!/usr/bin/env bb
;; vim: ft=clojure

(require '[babashka.deps :as deps])
(deps/add-deps
 '{:deps {org.babashka/http-client {:mvn/version "0.3.11"}}})

(ns install
  (:require [cheshire.core :as json]
            [clojure.string :as str]
            [clojure.java.io :as io]
            [babashka.process :as bp]
            [babashka.fs :as fs]
            [babashka.http-client :as http]))

(def repo-root
  (-> *file*
      fs/normalize
      fs/parent  ;; configFiles/scripts
      fs/parent  ;; configFiles
      ))

(def zsh-cfg-root (fs/path repo-root "zsh"))

(defn intel-cpu? []
  (str/includes? (slurp (java.io.FileReader. "/proc/cpuinfo")) "GenuineIntel"))

(def hostnamectl
  (delay
    (-> (bp/shell {:out :string} "hostnamectl" "--json" "short")
        :out
        (json/parse-string keyword))))

(def net-interfaces
  "list of interfaces, example output: [lo enp0s25 wlan0]"
  (delay
    (->> (bp/shell {:out :string} "ip" "-br" "link" "show")
         :out
         str/split-lines
         (map #(first (str/split % #"\s+")))
         concat
         vec)))

(defn laptop? []
  (= "laptop" (:Chassis @hostnamectl)))

(defn ensure-symlink
  "make sure there's a symlink at `path` pointing to `target`"
  [path target]
  (try
    (fs/create-sym-link path target)
    (catch java.nio.file.FileAlreadyExistsException _e
      nil)))

(defn installed-packages []
  (->> (bp/shell {:out :string} "pacman -Q")
       :out
       str/split-lines
       (map #(-> % (str/split #" ") first))
       (into #{})))

(defn install-packages [to-install]
  (let [{pacman true aur false} (group-by string? to-install)
        aur (map :aur aur)]
    (when-not (empty? pacman)
      (println "Installing packages: " pacman)
      (apply bp/shell "sudo" "pacman" "-S" "--noconfirm" "--needed" pacman))

    (when-not (empty? aur)
      (println "Installing from aur: " aur)
      (apply bp/shell "yay" "-S"
             "--batchinstall"
             "--answerclean" "None"
             "--answerdiff" "None"
             "--answeredit" "None"
             aur))))

(defn ensure-installed
  ([pkg-to-install] (ensure-installed (installed-packages) pkg-to-install))
  ([installed to-install]
   (cond
     (not (coll? to-install)) (recur installed (set [to-install]))
     (not (set? to-install)) (recur installed (set to-install))
     :else (let [to-install (vec (filter
                                  #(not (installed (or (:aur %) %)))
                                  to-install))]
             (when-not (empty? to-install) (install-packages to-install))))))

(defn install-oh-my-zsh []
  (let [url "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
        resp (http/get url)
        res (bp/shell {:out :string :extra-env {"RUNZSH" "no"} :continue true}
                      "sh" "-c" (:body resp))]
    (if (zero? (:exit res))
      (println "oh my zsh installed")
      (binding [*out* *err*]
        (println "ERROR when installing oh-my-zsh: "
                 (select-keys res [:err :out]))))
    res))

(defn ensure-oh-my-zsh []
  (when-not
   (fs/exists? (fs/path (fs/home) ".oh-my-zsh"))
    (install-oh-my-zsh)))

(defn configure-zsh []
  (ensure-installed ["starship" "ttf-nerd-fonts-symbols" "zoxide"])
  (ensure-oh-my-zsh)
  (let [base (slurp (.toFile (fs/path zsh-cfg-root "base.zsh")))
        plugins (str/join \newline ["plugins=(" "git" "fzf" ")"])
        usr-config (slurp (.toFile (fs/path zsh-cfg-root "user_config.zsh")))]
    (spit (.toFile (fs/path (fs/home) ".zshrc"))
          (str/join \newline [base plugins usr-config])))

  (ensure-symlink (fs/path (fs/home) ".oh-my-zsh" "custom" "geekingfrog.zsh")
                  (fs/path zsh-cfg-root "geekingfrog.zsh"))
  (ensure-symlink (fs/path (fs/xdg-config-home) "starship.toml")
                  (fs/path zsh-cfg-root "starship.toml")))

(defn ensure-user-units [units]
  (fs/create-dirs (fs/path (fs/xdg-config-home) "systemd" "user"))
  (run! (fn ensure-unit [unit]
          (ensure-symlink (fs/path (fs/xdg-config-home) "systemd" "user" unit)
                          (fs/path repo-root "systemd-units" unit))
          (bp/shell "systemctl" "--user" "start" unit)
          (bp/shell "systemctl" "--user" "enable" unit))
        units))

(defn configure-git []
  (ensure-symlink (fs/path (fs/home) ".tigrc") (fs/path repo-root ".tigrc"))
  (ensure-symlink (fs/path (fs/home) ".gitattributes") (fs/path repo-root ".gitattributes"))
  (bp/shell (.toFile (fs/path repo-root "gitconfig")))

  (let [ssh-path (fs/path (fs/home) ".ssh")
        gh-key-path (fs/path ssh-path "github-key")
        key-exists? (some #(fs/exists? (fs/path ssh-path %))
                          [(fs/file-name gh-key-path) "github_rsa"])
        ssh-config-path (fs/path ssh-path "config")]
    (when-not (fs/exists? ssh-path)
      (fs/create-dirs ssh-path {:posix-file-permissions (fs/str->posix "rwx------")}))

    (when-not key-exists?
      (bp/shell "ssh-keygen"
                "-t" "ed25519"
                "-f" (.toString gh-key-path)
                "-C" (str (:StaticHostname @hostnamectl) "to github")))

    (when-not (fs/exists? ssh-config-path)
      (fs/create-file ssh-config-path {:posix-file-permissions (fs/str->posix "rw-------")})
      (fs/write-bytes ssh-config-path
                      (.getBytes
                       (format "
Host *
  ServerAliveInterval 30
  AddKeysToAgent yes

Host github
  Hostname github.com

Host github.com
  Hostname github.com
  IdentityFile %s
"
                               (.toString gh-key-path)))
                      {:truncate-existing false}))))

(defn configure-tooling []
  (ensure-installed
   [;; various package for dev related activities
    "age"
    "bat"
    "clojure"
    {:aur "clojure-lsp-bin"}
    {:aur "clj-kondo-bin"}
    "difftastic"
    "fennel"
    {:aur "fennel-ls"}
    "fnlfmt"
    "fzf"
    "git-absorb"
    "git-delta"
    "hexyl"
    "htop"
    "jujutsu"
    "jq"
    "openjdk-doc"
    "openjdk-src"
    {:aur "mise-bin"}
    "mold"
    "neovim"
    "nmap"
    "openssh"
    "ripgrep"
    "tig"
    "tree"
    (if (intel-cpu?) "intel-ucode" "amd-ucode")])

  (configure-git)

  (ensure-symlink (fs/path (fs/xdg-config-home) "nvim") (fs/path repo-root "vim"))

  (let [mise-cfg-path (fs/path (fs/xdg-config-home) "mise")]
    (fs/create-dirs mise-cfg-path)
    (ensure-symlink (fs/path mise-cfg-path "config.toml")
                    (fs/path repo-root "mise_config.toml")))

  ;; this puts nodejs on the PATH, which is required for a bunch of nvim plugins
  (bp/shell "mise" "install" "--quiet")

  ;; cargo is also required for some neovim plugin, and I also do some rust dev
  (when (nil? (fs/which "rustup"))
    #_{:clj-kondo/ignore [:unresolved-symbol]}
    (fs/with-temp-dir [tmp-dir {}]
      (->> (http/get "https://sh.rustup.rs")
           :body
           (spit (str tmp-dir "/rustup.rs")))
      (bp/shell "sh"
                (str tmp-dir "/rustup.rs")
                "--default-toolchain" "stable"
                "--component" "rust-analyzer"
                "--no-modify-path"
                "-y")))

  (ensure-user-units ["ssh-agent.service"])

  (fs/create-dirs (fs/path (fs/home) ".local" "bin"))
  (ensure-symlink (fs/path (fs/home) ".local" "bin" "shot")
                  (fs/path repo-root "scripts" "shot")))

(defn graphics-drivers
  "
  graphics driver packages to install
  See: https://wiki.archlinux.org/title/Xorg
  "
  []
  (let [lspci (:out (bp/shell {:out :string} "lspci -v -nn -d ::03xx"))]
    (cond
      ;; newer intel cpu don't like xf86-video-intel package
      (str/includes? lspci "Intel Corporation Raptor Lake") ["mesa" "vulkan-intel"]
      (str/includes? lspci "Intel Corporation") ["xf86-video-intel" "mesa" "vulkan-intel"]
      ;; assuming no nvidia, it's unlikely I'll ever get one of those cards
      :else ["xf86-video-amdgpu" "mesa" "vulkan-radeon"])))

(defn disk-space
  "parse the output of `df`"
  []
  (let [df (->> (bp/shell {:out :string} "df --exclude tmpfs")
                :out
                str/split-lines
                next
                (map (fn [line]
                       (let [vs (map str/trim (str/split line #"\s+"))]
                         (zipmap [:filesystem :1k-blocks :used :available :use-percentage :mountpoint] vs))))
                vec)]
    (map #(-> %
              (update :used Long/parseLong)
              (update :available Long/parseLong)
              (update :1k-blocks Long/parseLong)
              (update :use-percentage
                      (fn [v] (-> v
                                  (subs 0 (dec (count v)))
                                  Long/parseLong
                                  (/ 100)))))

         df)))

(defn i3-status
  "generate the status configuration for this machine"
  []
  (let [has-temp? (-> (bp/shell {:out :string} "sensors")
                      :out
                      (str/includes? "Â°C"))
        disk-per-mounts (into {} (map (fn [m] [(:mountpoint m) m]) (disk-space)))]
    {:theme {:theme "gruvbox-dark"}
     :theme.overrides {:separator_fg "#c0c0c0"
                       :separator "|"}
     :icons {:icons "awesome6"}
     :icons.overrides {:cpu "\uf233"}
     :block
     (filter some?
             [(when has-temp?
                {:block "temperature"
                 :interval 10
                 :format "$icon $average, $max"
                 :block.theme_overrides {:separator "$" :separator_fg "#ff0000"}})

              (when (some #(str/includes? % "en") @net-interfaces)
                {:block "net"
                 :device "en"
                 :interval 5})

              (when (some #(str/includes? % "wlan") @net-interfaces)
                {:block "net"
                 :device "wlan"
                 :format "$icon $ssid"
                 :interval 5})

              (when-let [disk (get disk-per-mounts "/")]
                {:block "disk_space"
                 :path (:mountpoint disk)
                 :format "/ $available"
                 :interval 20
                 :warning 10.0
                 :alert 5.0
                 :alert_unit "GB"})

              (when-let [disk (get disk-per-mounts (str (fs/path (fs/home) "extra_data")))]
                {:block "disk_space"
                 :path (:mountpoint disk)
                 :format "extra $available"
                 :interval 20
                 :warning 20.0
                 :alert 10.0
                 :alert_unit "GB"})

              (when-let [disk (get disk-per-mounts "/home")]
                {:block "disk_space"
                 :path (:mountpoint disk)
                 :format " home $available"
                 :interval 20
                 :warning 20.0
                 :alert 10.0
                 :alert_unit "GB"})

              {:block "memory"
               :format " $icon$mem_used.eng(prefix:Mi)/$mem_total.eng(prefix:Mi)"
               :warning_mem 80
               :critical_mem 95}

              {:block "load"
               :interval 2
               :format " $icon $1m.eng(w:4)"}

              {:block "time"
               :interval 30
               :format "DC $timestamp.datetime(f:%R)"
               :timezone "America/New_York"}

              {:block "time"
               :interval 30
               :format "$icon $timestamp.datetime()"}

              {:block "sound"
               :headphones_indicator true}

              (when (laptop?)
                {:block "battery"
                 :device "DisplayDevice"
                 :driver "upower"
                 :format "$icon $percentage $time"})

              nil])}))

(defn cfg->status
  "
  Writes a given configuration (map) into the given writer in the format
  required by i3status-rust
  This is a bit cursed. Because this format is toml, but babashka cannot
  handle java libraries, and there are no 100% clojure toml library.
  So this is a very hand-wavey toml serialisation that works for this
  usecase, and probably no other
  "
  [wrt cfg]
  (cond
    (map? cfg)
    (run!
     (fn keyval->status [[k v]]
       (cond
         (map? v)
         (do
           (.write wrt (str "[" (name k) "]\n"))
           (cfg->status wrt v)
           (.write wrt "\n")
           (.write wrt "\n"))

         (coll? v)
         (run!
          (fn [x]
            (.write wrt (str "[[" (name k) "]]\n"))
            (cfg->status wrt x)
            (.write wrt "\n"))
          v)

         :else
         (do
           (.write wrt (str (name k) " = "))
           (if (string? v) (.write wrt (str "\"" v "\""))
               (.write wrt (str v)))
           (.write wrt "\n"))))

     cfg)
    :else nil))

(defn configure-i3
  ([] (configure-i3 (laptop?)))
  ([for-laptop?]
   (fs/create-dirs (fs/path (fs/xdg-config-home) "i3"))
   (let [i3-path (fs/path repo-root "i3")
         i3-config (fs/path (fs/xdg-config-home) "i3" "config")
         base (fs/read-all-bytes (fs/path i3-path "base_config"))
         custom (fs/read-all-bytes
                 (fs/path i3-path
                          (if for-laptop? "laptop_config" "desktop_config")))]
     (fs/write-bytes i3-config base)
     (fs/write-bytes i3-config custom {:append true}))

   (let [status-path (fs/path (fs/xdg-config-home) "i3" "status.toml")]
     (when (fs/sym-link? status-path) (fs/delete status-path))
     (with-open [wrt (io/writer (.toString status-path))]
       (cfg->status wrt (i3-status))))

   (ensure-symlink (fs/path (fs/home) ".xinitrc") (fs/path repo-root ".xinitrc"))))

(defn ensure-ntp []
  (let [props (->> (bp/shell {:out :string} "timedatectl" "show")
                   :out
                   (str/split-lines)
                   (map #(str/split % #"="))
                   (into {}))]
    (when-not (= "yes" (get props "NTP"))
      (println "enabling ntp")
      (bp/shell "sudo" "timedatectl" "set-ntp" "true"))))

(defn configure-desktop []
  (ensure-installed
   (concat
    (graphics-drivers)
    ["acpi"
     "dunst"
     "evince"
     "ffmpeg"
     "firefox"
     "pavucontrol"
     "playerctl"
     "pulseaudio"]
    ["xorg-server" "xorg-xinit" "i3-wm"
     "otf-font-awesome" "noto-fonts" "noto-fonts-cjk"
     "i3status-rust" "alsa-utils" "upower" ;; some deps for the blocks
     "rofi" "alacritty"]))

  (fs/create-dirs (fs/path (fs/xdg-config-home) "alacritty"))
  (ensure-symlink (fs/path (fs/xdg-config-home) "alacritty" "alacritty.toml")
                  (fs/path repo-root "alacritty.toml"))

  (ensure-ntp)
  (configure-i3))

;; temp(?) hack so that requiring the buffer with elin doesn't execute
;; anything
(when-not (empty? *command-line-args*)
  (configure-zsh)
  (configure-tooling)
  (configure-desktop))

;; TODO:
;; * fonts in X
