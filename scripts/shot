#!/usr/bin/env bb
;; vim: ft=clojure

"Script to take screenshot and save them under ~/screenshots.
Can also upload them directly to my vrac server"

(require '[babashka.process :refer [shell] :as p]
         '[babashka.cli :as cli]
         '[babashka.fs :as fs])

(def cli-options
  {:coerce {:hours :int :delay :int}
   :alias {:u :upload
           :n :no-expires
           :h :hours
           :d :delay}
   :exec-args {:hours 24}})

(defn scrot [{delay :delay tok-name :upload}]
  (let [path (if (nil? tok-name)
               (str (System/getenv "HOME")
                    "/screenshots/%Y-%m-%d-$wx$h-scrot.png")
               (str "/tmp/" tok-name ".png"))]
    (when delay (Thread/sleep (* 1000 delay)))
    (shell "scrot" "--freeze" "--select" path)
    path))

(defn upload [path {tok-name :upload hours :hours is-test :test delay :delay}]
  (try
    (let [args ["vrac" "upload"
                "--expires-hours" (str hours)
                "--name" tok-name
                (when is-test
                  ["--base-url" "http://localhost:8000"])
                path]
          _ (when delay (Thread/sleep (* 1000 delay)))
          result
          (apply shell {:out :string :err :string} (filter some? (flatten args)))]
      (.print *err* (:err result))
      (->> result :out (shell "xdg-open")))
    (catch clojure.lang.ExceptionInfo exc
      (shell "/usr/bin/notify-send" "--urgency" "critical" (:err (ex-data exc))))
    (finally
      (fs/delete path))))

(defn parse-opts []
  (try
    (cli/parse-opts *command-line-args* cli-options)
    (catch clojure.lang.ExceptionInfo exc
      (shell "/usr/bin/notify-send" "--urgency" "critical" (:msg (ex-data exc)))
      (throw exc))))

(let [opts (parse-opts)
      path (scrot opts)]
  (when (:upload opts) (upload path opts)))
